pick = all$MAF == "0:0.01"
all = all[!pick,]
ggplot(data=all, aes(x=MAF, y=r_2, group=method, col = method)) +
geom_line()+
geom_point() + guides(x = guide_axis(angle = 45)) + theme_light() + scale_y_continuous(breaks=seq(0,1,0.05))
ggplot(data=all, aes(x=MAF, y=r_2, group=method, col = method)) +
geom_line()+
geom_point() + guides(x = guide_axis(angle = 45)) + theme_light() + scale_y_continuous(breaks=seq(0,1,0.025)) + ggtitle("VN504 CHR 18") + ylim(0, 0.95)
ggplot(data=all, aes(x=MAF, y=r_2, group=method, col = method)) +
geom_line()+
geom_point() + guides(x = guide_axis(angle = 45)) + theme_light() + scale_y_continuous(breaks=seq(0,1,0.025)) + ggtitle("VN504 CHR 18") + ylim(0.8, 0.95)
library(ggplot2)
pick = all$MAF == "0:0.01"
all = all[!pick,]
ggplot(data=all, aes(x=MAF, y=r_2, group=method, col = method)) +
geom_line()+
geom_point() + guides(x = guide_axis(angle = 45)) + theme_light() + scale_y_continuous(breaks=seq(0,1,0.05))
ggplot(data=all, aes(x=MAF, y=r_2, group=method, col = method)) +
geom_line()+
geom_point() + guides(x = guide_axis(angle = 45)) + theme_light() + scale_y_continuous(breaks=seq(0,1,0.05)) + labs(title="chr18",
x ="bin of MAF", y = "imputation accuracy")
i = 13
"%&%" = function(a,b)paste0(a,b)
mRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/mRNA/salmon/EGAR000011930" %&% i %&% "no_circular_RNA/quant.sf"
rRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_no_circRNA/EGAR000011930" %&% (i+1) %&% "no_circular_RNA/quant.sf"
rRNA_circ_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_WITH_circRNA/EGAR000011930" %&% (i+1) %&% "_WITH_circular_RNA/quant.sf"
mRNA = read.table(mRNA_path, header = T)
rRNA = read.table(rRNA_path, header = TRUE)
#x = read.table("/media/datn/data/DatProjects/quant_circRNA/runing/salmon_stranded/ISR_EGAR00001193012_ribo_minus_WITH_circular_RNA/quant.sf", header = T)
x = read.table(rRNA_circ_path, header = T)
pick = x$Name %in% rRNA$Name
y = x[pick,]
cor(log2(mRNA$TPM+0.1), log2(rRNA$TPM+0.1))
cor(log2(mRNA$TPM+0.1), log2(y$TPM+0.1))
?seq
seq(1,89,2)
require(GenomicFeatures)
require(Biostrings)
## processing inputs
gtf_sqlite_path = "/media/datn/data/DatProjects/index_human_3775/Homo_sapiens.GRCh37.75.sqlite"
anntxdb <- loadDb(gtf_sqlite_path)
tx = transcripts(anntxdb)
tx_all = select(anntxdb, keys = tx$tx_name, columns=c("GENEID", "TXNAME", "EXONSTRAND", "EXONCHROM"), keytype = "TXNAME")
circInfo_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/circall/filtered_circInfo.txt"
circInfo = read.delim(circInfo_path)
circRNA_host_gene = circInfo$GENEID
pick = tx_all$GENEID %in% circRNA_host_gene
tx_in_circRAN_host_gene = tx_all$TXNAME[pick]
tx_NOT_in_circRAN_host_gene = tx_all$TXNAME[!pick]
length(tx_in_circRAN_host_gene)
length(tx_NOT_in_circRAN_host_gene)
i =11
##################
require(GenomicFeatures)
require(Biostrings)
## processing inputs
gtf_sqlite_path = "/media/datn/data/DatProjects/index_human_3775/Homo_sapiens.GRCh37.75.sqlite"
anntxdb <- loadDb(gtf_sqlite_path)
tx = transcripts(anntxdb)
tx_all = select(anntxdb, keys = tx$tx_name, columns=c("GENEID", "TXNAME", "EXONSTRAND", "EXONCHROM"), keytype = "TXNAME")
circInfo_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/circall/filtered_circInfo.txt"
circInfo = read.delim(circInfo_path)
circRNA_host_gene = circInfo$GENEID
pick = tx_all$GENEID %in% circRNA_host_gene
tx_in_circRAN_host_gene = tx_all$TXNAME[pick]
tx_NOT_in_circRAN_host_gene = tx_all$TXNAME[!pick]
sample_id = seq(1,89,2)
"%p%" = function(a,b) paste0(a,b)
i = 11
mRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/mRNA/salmon/EGAR000011930" %p% i %p% "no_circular_RNA/quant.sf"
rRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_no_circRNA/EGAR000011930" %p% (i+1) %p% "no_circular_RNA/quant.sf"
rRNA_circ_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_WITH_circRNA/EGAR000011930" %p% (i+1) %p% "_WITH_circular_RNA/quant.sf"
mRNA = read.table(mRNA_path, header = T)
rRNA = read.table(rRNA_path, header = TRUE)
rRNA_circ = read.table(rRNA_circ_path, header = T)
# consider all
pick = rRNA_circ$Name %in% rRNA$Name
rRNA_circ_pick = rRNA_circ[pick,]
cor(log2(mRNA$TPM+0.1), log2(rRNA$TPM+0.1))
cor(log2(mRNA$TPM+0.1), log2(rRNA_circ_pick$TPM+0.1))
## consider tx not belong to circRNA host genes
tx_list = tx_in_circRAN_host_gene
x = mRNA[ mRNA$Name %in% tx_list,]
y = rRNA[ rRNA$Name %in% tx_list,]
z = rRNA_circ[ rRNA_circ$Name %in% tx_list,]
cor(log2(x$TPM+0.1), log2(y$TPM+0.1))
cor(log2(x$TPM+0.1), log2(z$TPM+0.1))
## consider tx belong to circRNA host genes
tx_list = tx_NOT_in_circRAN_host_gene
x = mRNA[ mRNA$Name %in% tx_list,]
y = rRNA[ rRNA$Name %in% tx_list,]
z = rRNA_circ[ rRNA_circ$Name %in% tx_list,]
cor(log2(x$TPM+0.1), log2(y$TPM+0.1))
cor(log2(x$TPM+0.1), log2(z$TPM+0.1))
res = matrix()
res
sample_id = seq(1,89,2)
res = matrix()
for(i in sample_id){
#"%p%" = function(a,b) paste0(a,b)
mRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/mRNA/salmon/EGAR000011930" %p% i %p% "no_circular_RNA/quant.sf"
rRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_no_circRNA/EGAR000011930" %p% (i+1) %p% "no_circular_RNA/quant.sf"
rRNA_circ_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_WITH_circRNA/EGAR000011930" %p% (i+1) %p% "_WITH_circular_RNA/quant.sf"
mRNA = read.table(mRNA_path, header = T)
rRNA = read.table(rRNA_path, header = TRUE)
rRNA_circ = read.table(rRNA_circ_path, header = T)
# consider all
pick = rRNA_circ$Name %in% rRNA$Name
rRNA_circ_pick = rRNA_circ[pick,]
x1 = cor(log2(mRNA$TPM+0.1), log2(rRNA$TPM+0.1))
x2 = cor(log2(mRNA$TPM+0.1), log2(rRNA_circ_pick$TPM+0.1))
## consider tx not belong to circRNA host genes
tx_list = tx_in_circRAN_host_gene
x = mRNA[ mRNA$Name %in% tx_list,]
y = rRNA[ rRNA$Name %in% tx_list,]
z = rRNA_circ[ rRNA_circ$Name %in% tx_list,]
x3 = cor(log2(x$TPM+0.1), log2(y$TPM+0.1))
x4 = cor(log2(x$TPM+0.1), log2(z$TPM+0.1))
## consider tx belong to circRNA host genes
tx_list = tx_NOT_in_circRAN_host_gene
x = mRNA[ mRNA$Name %in% tx_list,]
y = rRNA[ rRNA$Name %in% tx_list,]
z = rRNA_circ[ rRNA_circ$Name %in% tx_list,]
x5 = cor(log2(x$TPM+0.1), log2(y$TPM+0.1))
x6 = cor(log2(x$TPM+0.1), log2(z$TPM+0.1))
tem = c(i,x1,x2,x3,x4,x5,x6)
res = rbind(res, tem)
}
sample_id = seq(11,89,2)
res = matrix()
for(i in sample_id){
#"%p%" = function(a,b) paste0(a,b)
mRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/mRNA/salmon/EGAR000011930" %p% i %p% "no_circular_RNA/quant.sf"
rRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_no_circRNA/EGAR000011930" %p% (i+1) %p% "no_circular_RNA/quant.sf"
rRNA_circ_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_WITH_circRNA/EGAR000011930" %p% (i+1) %p% "_WITH_circular_RNA/quant.sf"
mRNA = read.table(mRNA_path, header = T)
rRNA = read.table(rRNA_path, header = TRUE)
rRNA_circ = read.table(rRNA_circ_path, header = T)
# consider all
pick = rRNA_circ$Name %in% rRNA$Name
rRNA_circ_pick = rRNA_circ[pick,]
x1 = cor(log2(mRNA$TPM+0.1), log2(rRNA$TPM+0.1))
x2 = cor(log2(mRNA$TPM+0.1), log2(rRNA_circ_pick$TPM+0.1))
## consider tx not belong to circRNA host genes
tx_list = tx_in_circRAN_host_gene
x = mRNA[ mRNA$Name %in% tx_list,]
y = rRNA[ rRNA$Name %in% tx_list,]
z = rRNA_circ[ rRNA_circ$Name %in% tx_list,]
x3 = cor(log2(x$TPM+0.1), log2(y$TPM+0.1))
x4 = cor(log2(x$TPM+0.1), log2(z$TPM+0.1))
## consider tx belong to circRNA host genes
tx_list = tx_NOT_in_circRAN_host_gene
x = mRNA[ mRNA$Name %in% tx_list,]
y = rRNA[ rRNA$Name %in% tx_list,]
z = rRNA_circ[ rRNA_circ$Name %in% tx_list,]
x5 = cor(log2(x$TPM+0.1), log2(y$TPM+0.1))
x6 = cor(log2(x$TPM+0.1), log2(z$TPM+0.1))
tem = c(i,x1,x2,x3,x4,x5,x6)
res = rbind(res, tem)
}
warnings()
View(res)
i = 11
mRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/mRNA/salmon/EGAR000011930" %p% i %p% "no_circular_RNA/quant.sf"
rRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_no_circRNA/EGAR000011930" %p% (i+1) %p% "no_circular_RNA/quant.sf"
rRNA_circ_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_WITH_circRNA/EGAR000011930" %p% (i+1) %p% "_WITH_circular_RNA/quant.sf"
mRNA = read.table(mRNA_path, header = T)
rRNA = read.table(rRNA_path, header = TRUE)
rRNA_circ = read.table(rRNA_circ_path, header = T)
# consider all
pick = rRNA_circ$Name %in% rRNA$Name
rRNA_circ_pick = rRNA_circ[pick,]
x1 = cor(log2(mRNA$TPM+0.1), log2(rRNA$TPM+0.1))
x2 = cor(log2(mRNA$TPM+0.1), log2(rRNA_circ_pick$TPM+0.1))
## consider tx not belong to circRNA host genes
tx_list = tx_in_circRAN_host_gene
x = mRNA[ mRNA$Name %in% tx_list,]
y = rRNA[ rRNA$Name %in% tx_list,]
z = rRNA_circ[ rRNA_circ$Name %in% tx_list,]
x3 = cor(log2(x$TPM+0.1), log2(y$TPM+0.1))
x4 = cor(log2(x$TPM+0.1), log2(z$TPM+0.1))
## consider tx belong to circRNA host genes
tx_list = tx_NOT_in_circRAN_host_gene
x = mRNA[ mRNA$Name %in% tx_list,]
y = rRNA[ rRNA$Name %in% tx_list,]
z = rRNA_circ[ rRNA_circ$Name %in% tx_list,]
x5 = cor(log2(x$TPM+0.1), log2(y$TPM+0.1))
x6 = cor(log2(x$TPM+0.1), log2(z$TPM+0.1))
tem = c(i,x1,x2,x3,x4,x5,x6)
tem
res = matrix()
res = rbind(res, tem)
}
res = rbind(res, tem)
res
res = matrix(0,7)
res
res = matrix(7,0)
res = null
res = NULL
res = rbind(res, tem)
res
res = NULL
for(i in sample_id){
#"%p%" = function(a,b) paste0(a,b)
mRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/mRNA/salmon/EGAR000011930" %p% i %p% "no_circular_RNA/quant.sf"
rRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_no_circRNA/EGAR000011930" %p% (i+1) %p% "no_circular_RNA/quant.sf"
rRNA_circ_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_WITH_circRNA/EGAR000011930" %p% (i+1) %p% "_WITH_circular_RNA/quant.sf"
mRNA = read.table(mRNA_path, header = T)
rRNA = read.table(rRNA_path, header = TRUE)
rRNA_circ = read.table(rRNA_circ_path, header = T)
# consider all
pick = rRNA_circ$Name %in% rRNA$Name
rRNA_circ_pick = rRNA_circ[pick,]
x1 = cor(log2(mRNA$TPM+0.1), log2(rRNA$TPM+0.1))
x2 = cor(log2(mRNA$TPM+0.1), log2(rRNA_circ_pick$TPM+0.1))
## consider tx not belong to circRNA host genes
tx_list = tx_in_circRAN_host_gene
x = mRNA[ mRNA$Name %in% tx_list,]
y = rRNA[ rRNA$Name %in% tx_list,]
z = rRNA_circ[ rRNA_circ$Name %in% tx_list,]
x3 = cor(log2(x$TPM+0.1), log2(y$TPM+0.1))
x4 = cor(log2(x$TPM+0.1), log2(z$TPM+0.1))
## consider tx belong to circRNA host genes
tx_list = tx_NOT_in_circRAN_host_gene
x = mRNA[ mRNA$Name %in% tx_list,]
y = rRNA[ rRNA$Name %in% tx_list,]
z = rRNA_circ[ rRNA_circ$Name %in% tx_list,]
x5 = cor(log2(x$TPM+0.1), log2(y$TPM+0.1))
x6 = cor(log2(x$TPM+0.1), log2(z$TPM+0.1))
tem = c(i,x1,x2,x3,x4,x5,x6)
res = rbind(res, tem)
}
sample_id = seq(11,89,2)
res = NULL
for(i in sample_id){
#"%p%" = function(a,b) paste0(a,b)
mRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/mRNA/salmon/EGAR000011930" %p% i %p% "no_circular_RNA/quant.sf"
rRNA_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_no_circRNA/EGAR000011930" %p% (i+1) %p% "no_circular_RNA/quant.sf"
rRNA_circ_path = "/media/datn/data/DatProjects/quant_circRNA/running_hg19/totalRNA/salmon_decoy_WITH_circRNA/EGAR000011930" %p% (i+1) %p% "_WITH_circular_RNA/quant.sf"
mRNA = read.table(mRNA_path, header = T)
rRNA = read.table(rRNA_path, header = TRUE)
rRNA_circ = read.table(rRNA_circ_path, header = T)
# consider all
pick = rRNA_circ$Name %in% rRNA$Name
rRNA_circ_pick = rRNA_circ[pick,]
x1 = cor(log2(mRNA$TPM+0.1), log2(rRNA$TPM+0.1))
x2 = cor(log2(mRNA$TPM+0.1), log2(rRNA_circ_pick$TPM+0.1))
## consider tx not belong to circRNA host genes
tx_list = tx_in_circRAN_host_gene
x = mRNA[ mRNA$Name %in% tx_list,]
y = rRNA[ rRNA$Name %in% tx_list,]
z = rRNA_circ[ rRNA_circ$Name %in% tx_list,]
x3 = cor(log2(x$TPM+0.1), log2(y$TPM+0.1))
x4 = cor(log2(x$TPM+0.1), log2(z$TPM+0.1))
## consider tx belong to circRNA host genes
tx_list = tx_NOT_in_circRAN_host_gene
x = mRNA[ mRNA$Name %in% tx_list,]
y = rRNA[ rRNA$Name %in% tx_list,]
z = rRNA_circ[ rRNA_circ$Name %in% tx_list,]
x5 = cor(log2(x$TPM+0.1), log2(y$TPM+0.1))
x6 = cor(log2(x$TPM+0.1), log2(z$TPM+0.1))
tem = c(i,x1,x2,x3,x4,x5,x6)
res = rbind(res, tem)
}
View(res)
res = as.data.frame(res)
View(res)
t.test(res$V2, res$V3)
t.test(res$V4, res$V5)
boxplot(res$V2, res$V3)
boxplot(res$V4, res$V6)
wilcox.test(res$V2, res$V3, alternative = "two.sided")
wilcox.test(res$V4, res$V5, alternative = "two.sided")
boxplot(res$v2, res$V3, res$V4, res$V5, res$V6, res$V7)
boxplot(res$V2, res$V3, res$V4, res$V5, res$V6, res$V7)
t.test(res$V2, res$V6)
t.test(res$V4, res$V6)
res$V3 - res$V2
x = res$V3 - res$V2
x= res$V5-res$V4
y = res$V7- res$V6
t.test(x,y)
x
y
res$V7 - res$V6
load("/home/datn/Downloads/model.rds")
load("/home/datn/Downloads/model.rds")
readRDS("/home/datn/Downloads/model.rds")
x = readRDS("/home/datn/Downloads/model.rds")
names(x)
x$modelInfo
summary(x)
names(x)
x <- foreach(
i = 1:10,
.combine = 'c'
) %dopar% {
sqrt(i)
}
parallel::detectCores()
n.cores <- parallel::detectCores() - 1
#create the cluster
my.cluster <- parallel::makeCluster(
n.cores,
type = "PSOCK"
)
print(my.cluster)
doParallel::registerDoParallel(cl = my.cluster)
foreach::getDoParRegistered()
x <- foreach(
i = 1:10,
.combine = 'c'
) %dopar% {
sqrt(i)
}
x
<- foreach(
i = 1:10,
.combine = 'c'
) %dopar% {
sqrt(i)
}
x <- foreach(
i = 1:10,
.combine = 'c'
) %dopar% {
sqrt(i)
}
require(data.table)
require(foreach)
require(doParallel)
CPUNUM = 8
registerDoParallel(cores=CPUNUM)
x <- foreach(
i = 1:10,
.combine = 'c'
) %dopar% {
sqrt(i)
}
x
foreach(
i = 1:10,
.combine = 'c'
) %dopar% {
Sys.sleep(5)
}
Sys.sleep(5)
foreach(
i = 1:10,
.combine = 'c'
) %dopar% {
Sys.sleep(5)
}
foreach(
i = 1:8,
.combine = 'c'
) %dopar% {
Sys.sleep(5)
}
library(ggplot2)
library(patchwork)
library(dplyr)
ploughed1 <- data.frame(
Horizont = rep(1:4, 4),
RAI_II = runif(16, 10, 50),
Ferment = rep(c("-", "+"), each = 8),
compost = rep(c("- Compost", "+ Compost"), each = 4)
)
plot_fun <- function(x, title) {
ggplot(arrange(x, Horizont), aes(Ferment, RAI_II, fill = factor(Horizont, levels = c("4", "3", "2", "1")))) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("#FF9933", "#CC6600", "#663300", "#000000")) +
guides(fill = guide_legend(reverse = TRUE)) +
ylim(0, 200) +
theme_bw() +
facet_wrap(~compost) +
theme(
strip.text = element_text(size = 7),
panel.spacing = unit(0.2, "lines")
) +
geom_col(position = position_stack(reverse = TRUE)) +
labs(x = "Ferment", y = "RAI_II=Rooting*Scheme*Active", fill = "Horizon", title = title)
}
remove_y <- theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank()
)
p <- list(
plot_fun(ploughed1, "P-"),
plot_fun(ploughed1, "P+") + remove_y,
plot_fun(ploughed1, "RT-") + remove_y,
plot_fun(ploughed1, "RT+") + remove_y
)
wrap_plots(p, nrow = 1) + plot_layout(guides = "collect")
p[[1]]
p[[2]]
setwd("/media/datn/data/1st_DC_PRS_array_project/array_annotation/annotation_all_hg38")
require(data.table)
array_info = fread("array_size.txt")
all_bed = list()
chr_list = as.character(c(1:22))
for ( ar in array_info$array){
tem = fread(paste0(ar, "_hg38.bed"))
tem$V4 = ar
tem$V2 = as.integer(tem$V2)
tem$V3 = tem$V2
tem$id = paste(tem$V1, tem$V2, sep = ":")
pick = tem$V1 %in% chr_list & tem$V2 > 0
tem = tem[pick,]
all_bed[[ar]] = tem
# all_pos = c(all_pos, all_bed[[ar]]$id)
}
df = do.call(rbind, all_bed)
df = df[,-c("V4")]
names(df) = c("chr", "start", "end", "id")
d = duplicated(df$id)
df = df[!d,]
df = as.data.frame(df)
for( ar in array_info$array){
df[,ar] = 0
df[,ar][which(df$id %in% all_bed[[ar]]$id)] = 1
}
class(df$start)
## sorting and indexing
for(i in chr_list){
tem = df[df$chr == i,]
od = order(tem$start)
tem = tem[od,]
if(i == "1"){
res = tem
}else{
res = rbind(res, tem)
}
}
res = res[,-3]
fwrite(res, file = "db_array.txt", sep = "\t", row.names = F, col.names = F)
system("bgzip db_array.txt")
system("tabix db_array.txt.gz")
set("/media/datn/data2gb/GitHub/R_shiny_SNP_array_comparison")
setwd("/media/datn/data2gb/GitHub/R_shiny_SNP_array_comparison")
library(shiny)
library(shinythemes)
library(data.table)
####################################
# User Interface                   #
####################################
ui <- fluidPage(
theme = shinytheme("united"),
navbarPage("SNP array selector",
tabPanel("Home",
sidebarPanel(
#HTML("<h5>Copy/paste input:</h5>"),
textAreaInput(inputId = "SNV_pasted", label = "Paste SNVs ID:", placeholder = "1:20000\n2:40000\n22:50000", height = "400px"),
HTML("<h4>OR</h4>"),
#HTML("<h5>Upload file input:</h5>"),
fileInput("file_in", "Upload file", accept = ".tsv"),
#checkboxInput("header", "Header", TRUE),
#HTML("<h4>File requirements:</h4>"),
HTML("<h5>ONLY accept tsv file with each line is one SNV in chr:position format.</h5>"),
actionButton(inputId = "submitbutton", label = "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')),
"\nServer status",
verbatimTextOutput('contents'),
tableOutput('tabledata')
)
),
tabPanel("About",
titlePanel("About"),
div(includeMarkdown("about.md"),
align="justify")
)
)
)
####################################
# Server                           #
####################################
server <- function(input, output, session) {
# Input Data
datasetInput <- reactive({
if(nchar(input$SNV_pasted) > 2){
df = fread(input$SNV_pasted)
}else{
df = fread(input$file_in)
}
fwrite(df, file = "SNV_list.tsv", sep = "\t", col.names = F, row.names = F)
cmd = "tabix -R SNV_list.tsv db_array.txt.gz > results.txt"
res = fread("results.txt")
print(res)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create Shiny App                 #
####################################
shinyApp(ui = ui, server = server)
